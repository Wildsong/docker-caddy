version: "3.7"

networks:
  proxy:
    name: proxy
    external: true

volumes:
  caddy_data:
    name: caddy_data
    external: true

services:
  # This container will do NOTHING but the reverse proxy (and cert management).
  caddy:
    image: wildsong/caddy-proxy:latest
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    labels:
      caddy.email: ${EMAIL}
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock" ## needed to read events
      - caddy_data:/data:rw ## Persist certificates here
    networks:
      - proxy

  # Some services to test reverse proxying.
  # Refer tp the section "Labels to Caddyfile"
  # in here https://github.com/lucaslorentz/caddy-docker-proxy

# This is for static content
  root:
    build:
      context: .
      dockerfile: Dockerfile.static
    image: wildsong/static-caddy:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
# You have to put labels like these into the compose files for related projects
# so that this proxy will see them when they start up.
# I wish I could keep all the tokens here and not distributed.
    labels:
      caddy: ${CADDY_DOMAIN}
      caddy.reverse_proxy: "{{upstreams 80}}"
      caddy.tls.protocols: "tls1.3"
      caddy.tls.dns: "cloudflare ${CLOUDFLARE_API_TOKEN}"
    networks:
      - proxy

# This is a placeholder so that cert is created
# The redirect happens in Cloudflare via their "bulk redirects",
# sending all traffic for "www.DOMAIN" to "DOMAIN".
# Cloudflare needs to see there is a server with a cert
# at this address before it will do the redirect.
  www:
    image: caddy:2.4.6
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    labels:
      caddy: www.${CADDY_DOMAIN}
      caddy.respond: / "You should go to https://map46.com" 200
      caddy.reverse_proxy: "{{upstreams 80}}"
      caddy.tls.protocols: "tls1.3"
      caddy.tls.dns: "cloudflare ${CLOUDFLARE_API_TOKEN}"
    networks:
      - proxy

  p3:
    image: jwilder/whoami:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    labels:
      caddy: p3.${CADDY_DOMAIN}
      caddy.reverse_proxy: "{{upstreams 8000}}"
      caddy.tls.protocols: "tls1.3"
      caddy.tls.dns: "cloudflare ${CLOUDFLARE_API_TOKEN}"
    networks:
      - proxy
